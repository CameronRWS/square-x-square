@page "/"
@using Components;



Square x Square

<div @onkeydown="KeyboardEventHandler">

    <MudIconButton Icon=@Icons.Filled.ArrowBack OnClick ="@MoveLeft" Variant="Variant.Filled" Color="Color.Primary"></MudIconButton>
    <MudIconButton Icon=@Icons.Filled.ArrowDownward OnClick="@MoveDown" Variant="Variant.Filled" Color="Color.Primary"></MudIconButton>
    <MudIconButton Icon=@Icons.Filled.ArrowUpward OnClick ="@MoveUp" Variant="Variant.Filled" Color="Color.Primary"></MudIconButton>
    <MudIconButton Icon=@Icons.Filled.ArrowForward OnClick="@MoveRight" Variant="Variant.Filled" Color="Color.Primary"></MudIconButton>
    <MudDivider />
    <MudButton OnClick="@NextBlock" Variant="Variant.Filled" Color="Color.Primary">Next Block</MudButton>
    <MudButton OnClick="@PrevBlock" Variant="Variant.Filled" Color="Color.Primary">Prev Block</MudButton>
    <MudDivider />
    <MudButton OnClick="@RotateCW" Variant="Variant.Filled" Color="Color.Primary">Rotate Clockwise</MudButton>
    <MudButton OnClick="@RotateCCW" Variant="Variant.Filled" Color="Color.Primary">Rotate Counter-Clockwise</MudButton>
    <MudButton OnClick="@Flip" Variant="Variant.Filled" Color="Color.Primary">Flip</MudButton>
    <MudDivider />
    <MudButton OnClick="@PlaceBlock" Variant="Variant.Filled" Color="Color.Primary">Place Block</MudButton>
    <MudButton OnClick="@Reset" Variant="Variant.Filled" Color="Color.Primary">Reset</MudButton>

    <CascadingValue Value="@gs">
        <CascadingValue Value="@_blockToPlace">
            <GridComp OnStateHasChanged="OnStateHasChanged" />
        </CascadingValue>
    </CascadingValue>

    <MudText>@_messageToLog</MudText>
</div>


@code {
    @using Classes;

    public Game gs;

    public Classes.Block _blockToPlace { get; set; }
    public int rowToPlace = 0;
    public int columnToPlace = 0;

    private string _messageToLog = string.Empty;

    protected override void OnInitialized()
    {
        Reset();
    }

    public void Reset()
    {
        gs = new Game();
        _blockToPlace = gs.BlocksToPlace.ElementAt(0);
        _messageToLog = "Fill in the square.";
    }

    public void Flip()
    {
        if (_blockToPlace == null) return;
        _blockToPlace.Flip();
    }

    public void RotateCCW()
    {
        if (_blockToPlace == null) return;
        _blockToPlace.RotateCCW();
    }

    public void RotateCW()
    {
        if (_blockToPlace == null) return;
        _blockToPlace.RotateCW();
    }

    public void MoveLeft()
    {
        if (_blockToPlace == null) return;
        _blockToPlace.offset.Column--;
        if (!gs.IsBlockInBounds(_blockToPlace)) _blockToPlace.offset.Column++;
    }

    public void MoveRight()
    {
        if (_blockToPlace == null) return;
        _blockToPlace.offset.Column++;
        if (!gs.IsBlockInBounds(_blockToPlace)) _blockToPlace.offset.Column--;
    }

    public void MoveUp()
    {
        if (_blockToPlace == null) return;
        _blockToPlace.offset.Row--;
        if (!gs.IsBlockInBounds(_blockToPlace)) _blockToPlace.offset.Row++;
    }

    public void MoveDown()
    {
        if (_blockToPlace == null) return;
        _blockToPlace.offset.Row++;
        if (!gs.IsBlockInBounds(_blockToPlace)) _blockToPlace.offset.Row--;
    }

    public void NextBlock()
    {
        if (_blockToPlace == null) return;
        _blockToPlace = gs.GetNextBlockToPlace(_blockToPlace);
    }

    public void PrevBlock()
    {
        if (_blockToPlace == null) return;
        _blockToPlace = gs.GetPrevBlockToPlace(_blockToPlace);
    }

    public void PlaceBlock()
    {
        if (_blockToPlace == null) return;
        if (gs.CheckLocationAndAddBlock(_blockToPlace))
        {
            _messageToLog = "Successfully placed.";
            if (gs.BlocksToPlace.Count != 0)
            {
                _blockToPlace = gs.BlocksToPlace.ElementAt(0);
            }
            else
            {
                _blockToPlace = null;
                _messageToLog = "Placed the last block. Nice.";
            }
        }
        else
        {
            _messageToLog = "Could not place here.";
        }
    }

    private void KeyboardEventHandler(KeyboardEventArgs args)
    {
        if (_blockToPlace == null) return;
        if(args.Type == "keydown")
        {
            if(args.Key == "ArrowUp")
            {
                MoveUp();
            }
            else if (args.Key == "ArrowDown")
            {
                MoveDown();
            }
            else if (args.Key == "ArrowRight")
            {
                MoveRight();
            }
            else if (args.Key == "ArrowLeft")
            {
                MoveLeft();
            }
            else if (args.Key == "a")
            {
                RotateCCW();
            }
            else if (args.Key == "d")
            {
                RotateCW();
            }
            else if (args.Key == "f")
            {
                Flip();
            }
            else if (args.Key == "w")
            {
                NextBlock();
            }
            else if (args.Key == "s")
            {
                PrevBlock();
            }
            else if (args.Key == "e")
            {
                PlaceBlock();
            }
        }
    }

    private void OnStateHasChanged()
    {
        StateHasChanged();
    }
}
